{"ast":null,"code":"import _classCallCheck from \"/home/dosseh/WEB-react-router-lab/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/dosseh/WEB-react-router-lab/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/dosseh/WEB-react-router-lab/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/dosseh/WEB-react-router-lab/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/dosseh/WEB-react-router-lab/node_modules/@babel/runtime/helpers/esm/inherits\";\nvar _jsxFileName = \"/home/dosseh/WEB-react-router-lab/src/Components/App.js\";\nimport React, { Component } from \"react\";\nimport styles from \"../Cascading_Style_Sheets/App.css\";\nimport { Sensor } from \"../Models/Sensor\";\nimport { Data } from \"../Models/Data\";\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport SensorList from \"./SensorList\";\nimport SensorInformation from \"./SensorInformation.js\";\nimport SensorHistoric from \"./SensorHistoric.js\";\n\nvar App =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(App, _Component);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(App).call(this, props));\n    _this.state = {\n      list: [],\n      u: u\n    };\n\n    _this.dataOperation();\n\n    return _this;\n  } // It will return a sensor wich name is passing in paramettes from state's list if that one's name exist in the state's list\n\n\n  _createClass(App, [{\n    key: \"selectedSensor\",\n    value: function selectedSensor(nameFromOnclick) {\n      for (var i = 0; i < this.state.list.length; i++) {\n        if (this.state.list[i].name === nameFromOnclick) {\n          return this.state.list[i];\n        }\n      }\n    } // It will get json data and do an operation about it. Then it will set the state of state's list\n\n  }, {\n    key: \"dataOperation\",\n    value: function dataOperation() {\n      var object = this;\n      var sensorList = []; // It will return true of the sensor name already exist in sensorList array\n\n      var ws = new WebSocket(\"ws://\" + window.location.host + \"/socket\");\n      var url = ws.url; // the one we'll set soon by onclic action\n\n      var mqtt = require(\"mqtt\");\n\n      var client = mqtt.connect(url);\n      client.on(\"connect\", function () {\n        client.subscribe(\"#\", function (err) {});\n      });\n\n      function checkSensor(id, sensorList) {\n        for (var i = 0; i < sensorList.length; i++) {\n          if (sensorList[i].id === id) {\n            return true;\n          }\n        }\n      } // It will return a sensor wich name is passing in paramettes from sensorList if that one's name exist in the sensorList\n\n\n      function curentSensor(id, sensorList) {\n        for (var i = 0; i < sensorList.length; i++) {\n          if (sensorList[i].id === id) {\n            return sensorList[i];\n          }\n        }\n      }\n\n      client.on(\"message\", function (topic, message) {\n        var jsonData = JSON.parse(message.toString());\n        var name = jsonData[\"name\"];\n        var value = jsonData[\"value\"];\n        var type = jsonData[\"type\"];\n        var data = new Data([value]);\n\n        if (!checkSensor(topic, sensorList)) {\n          var sensor = new Sensor(topic, name, data, type);\n          sensorList.push(sensor);\n        } else {\n          var thisSensor = curentSensor(topic, sensorList);\n          sensorList.push.apply(thisSensor.data.value, [value]);\n        }\n\n        object.setState({\n          list: sensorList\n        });\n      });\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this2 = this;\n\n      return React.createElement(Router, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: styles.App,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99\n        },\n        __self: this\n      }, React.createElement(\"article\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 100\n        },\n        __self: this\n      }, React.createElement(\"header\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101\n        },\n        __self: this\n      }, \"BIENVENUE SUR LA PAGE D'ACCUEIL\"), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102\n        },\n        __self: this\n      }, React.createElement(\"nav\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 103\n        },\n        __self: this\n      }, React.createElement(\"p\", {\n        contenteditable: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 104\n        },\n        __self: this\n      }, \"LISTE DES CAPTEURS\"), React.createElement(SensorList, {\n        sensorList: this.state.list,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 106\n        },\n        __self: this\n      })), React.createElement(\"main\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 108\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        class: \"form-inline\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 109\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        class: \"form-group mx-sm-3 mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 110\n        },\n        __self: this\n      }, React.createElement(\"input\", {\n        type: \"text\",\n        class: \"form-control\",\n        placeholder: \" Saisir l'URL du Brocker\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112\n        },\n        __self: this\n      })), React.createElement(\"button\", {\n        type: \"submit\",\n        class: \"btn btn-primary mb-2\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 120\n        },\n        __self: this\n      }, \"VALIDER\")), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124\n        },\n        __self: this\n      }), React.createElement(\"div\", {\n        className: \"content\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125\n        },\n        __self: this\n      }, React.createElement(\"div\", {\n        className: \"contenerInfoSensor\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 126\n        },\n        __self: this\n      }, React.createElement(\"strong\", {\n        contenteditable: true,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 127\n        },\n        __self: this\n      }, \"INFORMATIONS DES CAPTEURS\"), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 128\n        },\n        __self: this\n      }), React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 129\n        },\n        __self: this\n      }), React.createElement(Route, {\n        path: \"/:urlToRecuva\",\n        exact: true,\n        strict: true,\n        render: function render(props) {\n          return React.createElement(SensorInformation, {\n            sensorInformation: _this2.selectedSensor(props.match.params.urlToRecuva.replace(/\\_+/g, \" \")),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 136\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 130\n        },\n        __self: this\n      })), React.createElement(\"div\", {\n        className: \"contenerHistoricTable\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 148\n        },\n        __self: this\n      }, React.createElement(\"table\", {\n        class: \"table w-100 p-3\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 149\n        },\n        __self: this\n      }, React.createElement(\"thead\", {\n        class: \"thead-dark\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 150\n        },\n        __self: this\n      }, React.createElement(\"tr\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 151\n        },\n        __self: this\n      }, React.createElement(\"th\", {\n        scope: \"col\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152\n        },\n        __self: this\n      }, \"HISTORIQUE\"))), React.createElement(Route, {\n        path: \"/:urlToRecuva\",\n        exact: true,\n        strict: true,\n        render: function render(props) {\n          return React.createElement(SensorHistoric, {\n            sensorHistoric: _this2.selectedSensor(props.match.params.urlToRecuva.replace(/\\_+/g, \" \")),\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 161\n            },\n            __self: this\n          });\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        },\n        __self: this\n      })))))), React.createElement(\"footer\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 177\n        },\n        __self: this\n      }, \"All rights reversed.\", React.createElement(\"br\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 179\n        },\n        __self: this\n      }), React.createElement(\"small\", {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 180\n        },\n        __self: this\n      }, \"@ Dosseh KOUTO 2019\")))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["/home/dosseh/WEB-react-router-lab/src/Components/App.js"],"names":["React","Component","styles","Sensor","Data","BrowserRouter","Router","Route","SensorList","SensorInformation","SensorHistoric","App","props","state","list","u","dataOperation","nameFromOnclick","i","length","name","object","sensorList","ws","WebSocket","window","location","host","url","mqtt","require","client","connect","on","subscribe","err","checkSensor","id","curentSensor","topic","message","jsonData","JSON","parse","toString","value","type","data","sensor","push","thisSensor","apply","setState","selectedSensor","match","params","urlToRecuva","replace"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport styles from \"../Cascading_Style_Sheets/App.css\";\nimport { Sensor } from \"../Models/Sensor\";\nimport { Data } from \"../Models/Data\";\n\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\nimport SensorList from \"./SensorList\";\nimport SensorInformation from \"./SensorInformation.js\";\nimport SensorHistoric from \"./SensorHistoric.js\";\n\n\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { list: [],u };\n\n    this.dataOperation();\n  }\n\n\n\n  // It will return a sensor wich name is passing in paramettes from state's list if that one's name exist in the state's list\n\n  selectedSensor(nameFromOnclick) {\n    for (let i = 0; i < this.state.list.length; i++) {\n      if (this.state.list[i].name === nameFromOnclick) {\n        return this.state.list[i];\n      }\n    }\n  }\n\n  // It will get json data and do an operation about it. Then it will set the state of state's list\n\n  dataOperation() {\n\n    let object = this;\n    let sensorList = [];\n\n    // It will return true of the sensor name already exist in sensorList array\n\n    const ws = new WebSocket(\"ws://\" + window.location.host + \"/socket\");\n\n    let url = ws.url; // the one we'll set soon by onclic action\n\n    let mqtt = require(\"mqtt\");\n    let client = mqtt.connect(url);\n\n    client.on(\"connect\", function () {\n      client.subscribe(\"#\", function (err) { });\n    });\n\n\n    function checkSensor(id, sensorList) {\n      for (let i = 0; i < sensorList.length; i++) {\n        if (sensorList[i].id === id) {\n          return true;\n        }\n      }\n    }\n    // It will return a sensor wich name is passing in paramettes from sensorList if that one's name exist in the sensorList\n\n    function curentSensor(id, sensorList) {\n      for (let i = 0; i < sensorList.length; i++) {\n        if (sensorList[i].id === id) {\n          return sensorList[i];\n        }\n      }\n    }\n\n\n    client.on(\"message\", function (topic, message) {\n      let jsonData = JSON.parse(message.toString());\n\n      let name = jsonData[\"name\"];\n      let value = jsonData[\"value\"];\n      let type = jsonData[\"type\"];\n\n      let data = new Data([value]);\n\n      if (!checkSensor(topic, sensorList)) {\n        let sensor = new Sensor(topic, name, data, type);\n        sensorList.push(sensor);\n      } else {\n        let thisSensor = curentSensor(topic, sensorList);\n        sensorList.push.apply(thisSensor.data.value, [value]);\n      }\n      object.setState({ list: sensorList });\n\n    });\n  }\n\n\n  render() {\n\n    return (\n      <Router>\n        <div className={styles.App}>\n          <article>\n            <header>BIENVENUE SUR LA PAGE D'ACCUEIL</header>\n            <div className=\"content\">\n              <nav>\n                <p contenteditable>LISTE DES CAPTEURS</p>\n\n                <SensorList sensorList={this.state.list} />\n              </nav>\n              <main>\n                <form class=\"form-inline\">\n                  <div class=\"form-group mx-sm-3 mb-2\">\n\n                    <input\n                      type=\"text\"\n                      class=\"form-control\"\n                      placeholder=\" Saisir l'URL du Brocker\"\n                    />\n\n                  </div>\n\n                  <button type=\"submit\" class=\"btn btn-primary mb-2\">\n                    VALIDER\n                  </button>\n                </form>\n                <br />\n                <div className=\"content\">\n                  <div className=\"contenerInfoSensor\">\n                    <strong contenteditable>INFORMATIONS DES CAPTEURS</strong>\n                    <br />\n                    <br />\n                    <Route\n                      path=\"/:urlToRecuva\"\n                      exact\n                      strict\n                      render={props => {\n                        return (\n                          <SensorInformation\n                            sensorInformation={this.selectedSensor(\n                              props.match.params.urlToRecuva.replace(\n                                /\\_+/g,\n                                \" \"\n                              )\n                            )}\n                          />\n                        );\n                      }}\n                    />\n                  </div>\n                  <div className=\"contenerHistoricTable\">\n                    <table class=\"table w-100 p-3\">\n                      <thead class=\"thead-dark\">\n                        <tr>\n                          <th scope=\"col\">HISTORIQUE</th>\n                        </tr>\n                      </thead>\n                      <Route\n                        path=\"/:urlToRecuva\"\n                        exact\n                        strict\n                        render={props => {\n                          return (\n                            <SensorHistoric\n                              sensorHistoric={this.selectedSensor(\n                                props.match.params.urlToRecuva.replace(\n                                  /\\_+/g,\n                                  \" \"\n                                )\n                              )}\n                            />\n                          );\n                        }}\n                      />\n                    </table>\n                  </div>\n                </div>\n              </main>\n            </div>\n            <footer>\n              All rights reversed.\n              <br />\n              <small>@ Dosseh KOUTO 2019</small>\n            </footer>\n          </article>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}