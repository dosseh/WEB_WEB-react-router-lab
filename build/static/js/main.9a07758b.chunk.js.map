{"version":3,"sources":["Models/Sensor.js","Models/Data.js","Components/SensorList.js","Components/SensorInformation.js","Components/SensorHistoric.js","Components/BrokerUrl.js","Components/App.js","serviceWorker.js","index.js"],"names":["Sensor","id","name","data","type","_this","this","Object","classCallCheck","unityOfSensor","HashMapUnity","values","hasOwnProperty","push","join","_id","_name","_data","_type","createClass","key","get","set","Data","value","_value","i","length","Number","sum","parseFloat","Date","toLocaleString","SensorList","listSensor","props","sensorList","map","thisList","react_default","a","createElement","Link","to","concat","replace","className","Component","SensorInformation","averageValue","date","unity","sensorInformation","this_selected_sensor","substring","getlastValues","toFixed","getAverage","getDate","SensorHistoric","listValue","sensorHistoric","slice","Math","max","scope","BrokerUrl","brokerUrl","onSubmit","onUpdate","console","log","class","action","onChange","placeholder","onClick","App","possibleConstructorReturn","getPrototypeOf","call","state","list","brockerUrlValue","WebSocket","window","location","host","url","autoBind","assertThisInitialized","dataOperation","nameFromOnclick","event","setState","target","Redirect","object","client","require","connect","on","subscribe","err","topic","message","jsonData","JSON","parse","toString","checkSensor","thisSensor","curentSensor","apply","sensor","_this2","BrowserRouter","styles","contenteditable","Components_SensorList","Components_BrokerUrl","onSubmitBrockerForm","onUpdateBrockerInput","Route","path","exact","strict","render","Components_SensorInformation","selectedSensor","match","params","urlToRecuva","Components_SensorHistoric","Boolean","hostname","ReactDOM","Components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.9a07758b.chunk.js","sourcesContent":["\nexport const version = () => \"1.0.0\";\nexport class Sensor {\n    constructor(id, name, data, type) {\n      this._id = id;\n      this._name = name;\n      this._data = data;\n      this._type = type;\n    }\n  \n    get id() {\n      return this._id || \"\";\n    }\n    get name() {\n      return this._name || \"\";\n    }\n    get data() {\n      return this._data || {};\n    }\n    get type() {\n      return this._type || \"\";\n    }\n  \n    set id(id) {\n      this._id = id;\n    }\n  \n    set name(name) {\n      this._name = name;\n    }\n    set data(data) {\n      this._data = data;\n    }\n    set type(type) {\n      this._type = type;\n    }\n  \n    unityOfSensor = () => {\n      HashMapUnity[\"TEMPERATURE\"] = \" Â°C \";\n      HashMapUnity[\"PERCENT\"] = \" % \";\n      HashMapUnity[\"OPEN_CLOSE\"] = \"\";\n  \n      var values = [];\n      if (HashMapUnity.hasOwnProperty(this.type))\n        values.push(HashMapUnity[this.type]);\n      return values.join(\"\");\n    };\n  }\n  \n  const HashMapUnity = {};\n  ","export const version = () => \"1.0.0\";\n\nexport class Data {\n  constructor(value) {\n    this._value = value;\n  }\n\n  get value() {\n    return this._value || [];\n  }\n\n  set value(value) {\n    this._value = value;\n  }\n\n  getAverage() {\n    for (var i = 0; i < this.value.length; i++) {\n      if (!Number(this.value[i])) {\n        return \"Pas de valeur moyenne pour ce capteur !\";\n      }\n    }\n    var sum = 0;\n    for (i = 0; i < this.value.length; i++) {\n      sum += parseFloat(this.value[i]);\n    }\n    return sum / this.value.length;\n  }\n  getlastValues() {\n    return \" \" + this.value[this.value.length - 1] + \"\";\n  }\n\n  getDate() {\n    return new Date().toLocaleString();\n  }\n}\n\n","import React, { Component } from 'react';\n\nimport { Link } from 'react-router-dom';\nimport '../Cascading_Style_Sheets/App.css';\n\n\nclass SensorList extends Component {\n    render() {\n\n        const listSensor = this.props.sensorList.map(function (thisList) {\n            return <p>\n                <Link to={`/${thisList.name.replace(/\\s+/g, '_')}`}>\n                    <button className=\"btn btn-outline-success btn-lg btn-block\">\n                        {thisList.name}\n                    </button>\n                </Link>\n\n            </p>\n        });\n        return (\n            <ul>{listSensor}</ul>\n        );\n    }\n}\n\nexport default SensorList;\n","import React, { Component } from \"react\";\n\nimport \"../Cascading_Style_Sheets/App.css\";\n\nclass SensorInformation extends Component {\n  render() {\n    let id, name, value, type, averageValue, date, unity;\n\n    if (typeof this.props.sensorInformation !== \"undefined\") {\n      let this_selected_sensor = this.props.sensorInformation;\n\n      id = this_selected_sensor.id.substring(6);\n      name = this_selected_sensor.name;\n\n      value = Number(this_selected_sensor.data.getlastValues())\n        ? parseFloat(this_selected_sensor.data.getlastValues()).toFixed(2)\n        : this_selected_sensor.data.getlastValues();\n\n      type = this_selected_sensor.type;\n\n      unity = this_selected_sensor.unityOfSensor();\n\n      averageValue = Number(this_selected_sensor.data.getAverage())\n        ? parseFloat(this_selected_sensor.data.getAverage()).toFixed(2)\n        : this_selected_sensor.data.getAverage();\n\n      date = this_selected_sensor.data.getDate();\n    }\n\n    return (\n      <div>\n        <b>ID : {id} </b>\n        <br />\n        <br />\n        <b>NOM : {name}</b>\n        <br />\n        <br />\n        <b>\n          VALEUR : {value} {unity}\n        </b>\n        <br />\n        <br />\n        <b>TYPE : {type}</b>\n        <br />\n        <br />\n        <b>\n          VALEUR MOYENNE : {averageValue} {unity}\n        </b>\n        <br />\n        <br />\n        <b> DATE : {date}</b>\n        <br />\n        <br />\n      </div>\n    );\n  }\n}\n\nexport default SensorInformation;\n","import React, { Component } from \"react\";\nimport \"../Cascading_Style_Sheets/App.css\";\n\nclass SensorHistoric extends Component {\n  render() {\n    let  listValue;\n    if (typeof this.props.sensorHistoric !== \"undefined\") {\n      \n      let this_selected_sensor = this.props.sensorHistoric.data.value;\n      //console.log(this_selected_sensor);\n       listValue = this_selected_sensor.slice(Math.max(this_selected_sensor.length - 5, 1)).map(function(thisList) {\n       if(Number(thisList)) thisList = parseFloat(thisList).toFixed(2);\n        return (\n          <tr>\n            <th scope=\"row\">{thisList}</th>\n          </tr>\n          \n        );\n      });\n    }\n    return(<tbody>{listValue}</tbody>);\n  }\n}\n\nexport default SensorHistoric;","import React, { Component } from \"react\";\nimport \"../Cascading_Style_Sheets/App.css\";\n\nclass BrokerUrl extends Component {\n\n\n    render() {\n\n        let brokerUrl = this.props.brokerUrl;\n        let onSubmit = this.props.onSubmit;\n        let onUpdate = this.props.onUpdate;\n        console.log(brokerUrl)\n\n        return (\n            <form class=\"form-inline\" action={brokerUrl}>\n                <div class=\"form-group mx-sm-3 mb-2\">\n\n                    <input value={brokerUrl} onChange={onUpdate}\n                        type=\"text\"\n                        class=\"form-control\"\n                        placeholder=\" Saisir l'URL du Brocker\"\n                    />\n\n                </div>\n\n                <button\n                    onClick={onSubmit}\n                    type=\"submit\" class=\"btn btn-primary mb-2\"\n\n                >\n                    VALIDER\n        </button>\n            </form>\n\n\n        )\n    }\n\n}\n\nexport default BrokerUrl;\n","import React, { Component } from \"react\";\nimport styles from \"../Cascading_Style_Sheets/App.css\";\nimport { Sensor } from \"../Models/Sensor\";\nimport { Data } from \"../Models/Data\";\n\nimport { BrowserRouter as Router, Route, Redirect } from \"react-router-dom\";\nimport SensorList from \"./SensorList\";\nimport SensorInformation from \"./SensorInformation.js\";\nimport SensorHistoric from \"./SensorHistoric.js\";\nimport BrokerUrl from \"./BrokerUrl.js\";\nimport autoBind from 'react-autobind';\n\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { list: [], brockerUrlValue: new WebSocket(\"ws://\" + window.location.host + \"/socket\").url };\n    autoBind(this);\n    this.dataOperation();\n  }\n\n\n\n  // It will return a sensor wich name is passing in paramettes from state's list if that one's name exist in the state's list\n\n  selectedSensor(nameFromOnclick) {\n    for (let i = 0; i < this.state.list.length; i++) {\n      if (this.state.list[i].name === nameFromOnclick) {\n        return this.state.list[i];\n      }\n    }\n  }\n\n  onUpdateBrockerInput(event) {\n    this.setState({ brockerUrlValue: event.target.brockerUrlValue });\n  }\n\n  onSubmitBrockerForm(event) {\n    return <Redirect to={this.state.brockerUrlValue} />;\n  }\n\n\n  // It will get json data and do an operation about it. Then it will set the state of state's list\n\n  dataOperation() {\n\n    let object = this;\n    let sensorList = [];\n\n\n    let mqtt = require(\"mqtt\");\n    let client = mqtt.connect(this.state.brockerUrlValue);\n\n    client.on(\"connect\", function () {\n      client.subscribe(\"#\", function (err) { });\n    });\n\n    // It will return true of the sensor name already exist in sensorList array\n    function checkSensor(id, sensorList) {\n      for (let i = 0; i < sensorList.length; i++) {\n        if (sensorList[i].id === id) {\n          return true;\n        }\n      }\n    }\n    // It will return a sensor wich name is passing in paramettes from sensorList if that one's name exist in the sensorList\n\n    function curentSensor(id, sensorList) {\n      for (let i = 0; i < sensorList.length; i++) {\n        if (sensorList[i].id === id) {\n          return sensorList[i];\n        }\n      }\n    }\n\n    client.on(\"message\", function (topic, message) {\n      let jsonData = JSON.parse(message.toString());\n\n      let name = jsonData[\"name\"];\n      let value = jsonData[\"value\"];\n      let type = jsonData[\"type\"];\n\n      let data = new Data([value]);\n\n      if (!checkSensor(topic, sensorList)) {\n        let sensor = new Sensor(topic, name, data, type);\n        sensorList.push(sensor);\n      } else {\n        let thisSensor = curentSensor(topic, sensorList);\n        sensorList.push.apply(thisSensor.data.value, [value]);\n      }\n      object.setState({ list: sensorList });\n\n    });\n  }\n\n\n  render() {\n\n    return (\n      <Router>\n        <div className={styles.App}>\n          <article>\n            <header>BIENVENUE SUR LA PAGE D'ACCUEIL</header>\n            <div className=\"content\">\n              <nav>\n                <p contenteditable>LISTE DES CAPTEURS</p>\n\n                <SensorList sensorList={this.state.list} />\n              </nav>\n              <main>\n                <BrokerUrl\n                  brokerUrl={this.state.brockerUrlValue}\n                  onSubmit={this.onSubmitBrockerForm}\n                  onUpdate={this.onUpdateBrockerInput}\n\n                />\n                <br />\n\n                <div className=\"content\">\n                  <div className=\"contenerInfoSensor\">\n                    <strong contenteditable>INFORMATIONS DES CAPTEURS</strong>\n                    <br />\n                    <br />\n                    <Route\n                      path=\"/:urlToRecuva\"\n                      exact\n                      strict\n                      render={props => {\n                        return (\n                          <SensorInformation\n                            sensorInformation={this.selectedSensor(\n                              props.match.params.urlToRecuva.replace(\n                                /\\_+/g,\n                                \" \"\n                              )\n                            )}\n                          />\n                        );\n                      }}\n                    />\n                  </div>\n                  <div className=\"contenerHistoricTable\">\n                    <table class=\"table w-100 p-3\">\n                      <thead class=\"thead-dark\">\n                        <tr>\n                          <th scope=\"col\">HISTORIQUE</th>\n                        </tr>\n                      </thead>\n                      <Route\n                        path=\"/:urlToRecuva\"\n                        exact\n                        strict\n                        render={props => {\n                          return (\n                            <SensorHistoric\n                              sensorHistoric={this.selectedSensor(\n                                props.match.params.urlToRecuva.replace(\n                                  /\\_+/g,\n                                  \" \"\n                                )\n                              )}\n                            />\n                          );\n                        }}\n                      />\n                    </table>\n                  </div>\n                </div>\n              </main>\n            </div>\n            <footer>\n              All rights reversed.\n              <br />\n              <small>@ Dosseh KOUTO 2019</small>\n            </footer>\n          </article>\n        </div>\n      </Router>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './Cascading_Style_Sheets/index.css';\nimport App from './Components/App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}